{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Projetos (N\\xE3o Apagar)\\\\Pessoal\\\\Rocketseat\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challegenesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challegenesCompleted: challegenesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"IRMXDf6jxvBBY7b2XmtKZbrDD7k=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/Projetos (NÃ£o Apagar)/Pessoal/Rocketseat/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challegenesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAcA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,OAAoE;AAAA;;AAAA,MAAtCC,QAAsC,QAAtCA,QAAsC;;AAAA,kBAE/CJ,QAAQ,CAAC,CAAD,CAFuC;AAAA,MAElEK,KAFkE;AAAA,MAE3DC,QAF2D;;AAAA,mBAGvBN,QAAQ,CAAC,CAAD,CAHe;AAAA,MAGlEO,iBAHkE;AAAA,MAG/CC,oBAH+C;;AAAA,mBAIlBR,QAAQ,CAAC,CAAD,CAJU;AAAA,MAIlES,oBAJkE;AAAA,MAI5CC,sBAJ4C;;AAAA,mBAK3BV,QAAQ,CAAC,IAAD,CALmB;AAAA,MAKlEW,eALkE;AAAA,MAKjDC,kBALiD;;AAOzE,WAASC,OAAT,GAAmB;AACjBP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASS,iBAAT,GAA4B;AAC1B,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGnB,UAAU,CAACc,oBAAD,CAA5B;AAGD;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AACjCV,MAAAA,KAAK,EAALA,KADiC;AAEjCE,MAAAA,iBAAiB,EAAjBA,iBAFiC;AAGjCE,MAAAA,oBAAoB,EAApBA,oBAHiC;AAIjCI,MAAAA,OAAO,EAAPA,OAJiC;AAKjCC,MAAAA,iBAAiB,EAAjBA;AALiC,KAAnC;AAAA,cAOGV;AAPH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GA7BeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface ChallengesContextData {\r\n  level: number;\r\n  currentExperience: number;\r\n  challegenesCompleted: number;\r\n  levelUp: () => void;\r\n  startNewChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({ children } : ChallengesProviderProps) {\r\n\r\n  const [level, setLevel] = useState(1);\r\n  const [currentExperience, setCurrentExperience] = useState(0);\r\n  const [challegenesCompleted, setChallengesCompleted] = useState(0);\r\n  const [activeChallenge, setActiveChallenge] = useState(null)\r\n  \r\n  function levelUp() {\r\n    setLevel(level + 1);\r\n  }\r\n\r\n  function startNewChallenge(){\r\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length) ;\r\n    const challenge = challenges[randomChallengeIndex];\r\n\r\n\r\n  }\r\n  \r\n  return (\r\n    <ChallengesContext.Provider value={{ \r\n      level, \r\n      currentExperience, \r\n      challegenesCompleted, \r\n      levelUp,\r\n      startNewChallenge\r\n    }}>\r\n      {children}\r\n    </ChallengesContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}