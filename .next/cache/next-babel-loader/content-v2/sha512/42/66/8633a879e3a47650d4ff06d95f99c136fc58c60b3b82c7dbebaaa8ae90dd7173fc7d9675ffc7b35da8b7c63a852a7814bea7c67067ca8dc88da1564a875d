{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Projetos (N\\xE3o Apagar)\\\\Pessoal\\\\Rocketseat\\\\moveit-next\\\\src\\\\contexts\\\\SidebarContext.tsx\";\nimport { createContext, useState } from \"react\";\nexport const SidebarContext = /*#__PURE__*/createContext({});\nexport function SidebarProvider({\n  children\n}) {\n  // const { startNewChallenge } = useContext(ChallengesContext);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false); // useEffect(() => {\n  //   if (isActive && time > 0) {\n  //     countdownTimeout = setTimeout(() => {\n  //       setTime(time - 1);\n  //     }, 1000);\n  //   }\n  //   else if (isActive && time === 0) {\n  //     setHasFinished(true);\n  //     setIsActive(false);\n  //     startNewChallenge();\n  //   }\n  // }, [isActive, time]);\n\n  function changeVisibility() {\n    console.log('função executada');\n    isActive ? setIsActive(false) : setIsActive(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(SidebarContext.Provider, {\n    value: {\n      isActive,\n      changeVisibility\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Projetos (Não Apagar)/Pessoal/Rocketseat/moveit-next/src/contexts/SidebarContext.tsx"],"names":["createContext","useState","SidebarContext","SidebarProvider","children","isActive","setIsActive","changeVisibility","console","log"],"mappings":";;AAAA,SAAmBA,aAAnB,EAAoEC,QAApE,QAAoF,OAApF;AAYA,OAAO,MAAMC,cAAc,gBAAGF,aAAa,CAAC,EAAD,CAApC;AAEP,OAAO,SAASG,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAA8D;AAEnE;AACA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BL,QAAQ,CAAC,KAAD,CAAxC,CAHmE,CAKnE;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,WAASM,gBAAT,GAA4B;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAJ,IAAAA,QAAQ,GAAGC,WAAW,CAAC,KAAD,CAAd,GAAwBA,WAAW,CAAC,IAAD,CAA3C;AACD;;AAED,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAC9BD,MAAAA,QAD8B;AAE9BE,MAAAA;AAF8B,KAAhC;AAAA,cAIGH;AAJH;AAAA;AAAA;AAAA;AAAA,UADF;AAQD","sourcesContent":["import { Children, createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { ChallengesContext } from \"./ChallengesContext\";\r\n\r\ninterface SidebarContextData {\r\n  isActive: boolean;\r\n  changeVisibility: () => void;\r\n}\r\n\r\ninterface SidebarProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const SidebarContext = createContext({} as SidebarContextData);\r\n\r\nexport function SidebarProvider({ children } : SidebarProviderProps) {\r\n\r\n  // const { startNewChallenge } = useContext(ChallengesContext);\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  // useEffect(() => {\r\n  //   if (isActive && time > 0) {\r\n      \r\n  //     countdownTimeout = setTimeout(() => {\r\n  //       setTime(time - 1);\r\n  //     }, 1000);\r\n  //   }\r\n  //   else if (isActive && time === 0) {\r\n  //     setHasFinished(true);\r\n  //     setIsActive(false);\r\n  //     startNewChallenge();\r\n  //   }\r\n  // }, [isActive, time]);\r\n\r\n\r\n\r\n  function changeVisibility() {\r\n    console.log('função executada');\r\n    isActive ? setIsActive(false) : setIsActive(true);\r\n  }\r\n\r\n  return (\r\n    <SidebarContext.Provider value={{\r\n      isActive,\r\n      changeVisibility\r\n    }}>\r\n      {children}\r\n    </SidebarContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}